### Condensed Notes: CS4234 Optimization Algorithms

#### **1. Introduction**
- **Course Title**: Optimization Algorithms (Fast Algorithms for Slow Problems)
- **Instructor Change**: Prof. Divesh Aggarwal replaces Prof. Kenji Kawaguchi (medical leave).
- **Research Interests of Prof. Aggarwal**:
  - Cryptography, Lattices, Computational Number Theory, Randomness Extractors.

---

#### **2. Optimization Problems**
- **Types**:
  - **Discrete**: Countable sets (e.g., graphs).
  - **Continuous**: Continuous variables (e.g., minimize \( f(x) \)).
  - **Combinatorial**: Generated by counting/enumeration.

- **Examples**:
  - Shortest Path, Minimum Spanning Tree, Vertex Cover, Travelling Salesman.

- **Search Space Size ≠ Difficulty**:
  - Polynomial-Time Solvable: Shortest Path, Matching.
  - NP-Hard: Vertex Cover, Travelling Salesman.

---

#### **3. Representative Problems**
1. **Interval Scheduling**:
   - Input: Jobs with start/finish times.
   - Goal: Max subset of non-overlapping jobs.
   - Solution: Greedy, \( O(n \log n) \).

2. **Weighted Interval Scheduling**:
   - Input: Jobs with weights.
   - Goal: Max weight subset of compatible jobs.
   - Solution: Dynamic Programming, \( O(n \log n) \).

3. **Bipartite Matching**:
   - Input: Bipartite Graph.
   - Goal: Max cardinality matching.
   - Solution: Max-flow algorithm, \( O(n^c) \).

4. **Independent Set**:
   - Input: Graph.
   - Goal: Max subset of nodes (no adjacent edges).
   - NP-Complete.

5. **Competitive Facility Location**:
   - Input: Weighted graph, two players select nodes alternately.
   - Goal: Max weight subset of nodes (PSPACE-complete).

---

#### **4. Key Course Concepts**
- **Algorithmic Goals**:
  1. Design (problem-solving).
  2. Analysis (correctness, efficiency, complexity).

- **Complexity Focus**:
  - **Time Complexity**: Speed.
  - **Space Complexity**: Memory usage.

- **P vs NP Dichotomy**:
  - NP-Hard Problems:
    - Can’t solve in polynomial time unless \( P = NP \).
    - Approximation or heuristics often used.

---

#### **5. Vertex Cover Problem**
- **Definition**:
  - Given a graph \( G(V, E) \), find the smallest set \( C \) such that every edge is incident to a vertex in \( C \).

- **Variants**:
  - Decision Version: Does \( G \) have a vertex cover \( \leq k \)?
  - Optimization Version: Minimum size vertex cover.
  - NP-Complete and NP-Hard.

- **Algorithms**:
  - **Dynamic Programming (Trees)**:
    - \( O(n) \): Explore children edges once.
    - \( S[v, 0] \): Subtree rooted at \( v \) not covered.
    - \( S[v, 1] \): Subtree rooted at \( v \) covered.
  - **Parameterized Vertex Cover**:
    - Fixed-parameter tractable (\( FPT \)), time \( O(2^k \cdot n) \).
  - **Greedy Approximation**:
    - Approximation ratio \( 2 \).

---

#### **6. Approximation Algorithms**
- **Definition**:
  - \( A \) is an \( \alpha \)-approximation if \( \text{Cost}(A) \leq \alpha \cdot \text{OPT} \).
  
- **Vertex Cover Approximation**:
  - Greedy Algorithm 3:
    - Add both endpoints of an uncovered edge.
    - \( 2 \)-approximation.

---

#### **7. Set Cover Problem**
- **Definition**:
  - Input: Universe \( X \), subsets \( S_1, S_2, \ldots \).
  - Goal: Minimum collection \( I \subseteq \{1, \ldots, m\} \) covering \( X \).

- **Challenges**:
  - NP-Complete.

- **Greedy Algorithm**:
  - Repeatedly pick the set covering the most uncovered elements.
  - \( O(\log n) \)-approximation.

---

#### **8. Key Takeaways**
- **NP-Hard Problems**:
  - Can’t achieve fast, optimal, and universal solutions unless \( P = NP \).
  - Trade-offs:
    - Special cases, parameterized solutions, or approximations.
- **Importance of Algorithms**:
  - Performance improvement often stems from better algorithms over faster hardware.

--- 

These notes provide a succinct overview of the lecture's key points while maintaining important details for study or reference.
